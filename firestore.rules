rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Legacy global scores (kept for backward compatibility)
    match /scores/{docId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.keys().hasOnly(['username','score','uid','createdAt','mode'])
        && request.resource.data.username is string
        && request.resource.data.score is int
        && request.resource.data.uid == request.auth.uid
        && (request.resource.data.mode == null || request.resource.data.mode is string)
        && request.resource.data.createdAt == request.time;
      allow update, delete: if false;
    }

    // New per-mode leaderboards
    match /leaderboards/{mode}/scores/{scoreId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.keys().hasOnly(['username','score','uid','createdAt','mode'])
        && request.resource.data.username is string
        && request.resource.data.score is int
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.mode is string
        && request.resource.data.mode == mode
        && request.resource.data.createdAt == request.time;
      allow update, delete: if false;
    }


    // Global cumulative totals
    match /leaderboards/global/totals/{uid} {
      allow read: if true;
      allow create: if request.auth != null
        && uid == request.auth.uid
        && request.resource.data.keys().hasOnly(['username','uid','total','updatedAt'])
        && request.resource.data.username is string
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.total is int
        && request.resource.data.updatedAt == request.time;
      allow update: if request.auth != null
        && uid == request.auth.uid
        && request.resource.data.keys().hasOnly(['username','uid','total','updatedAt'])
        && request.resource.data.username is string
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.total is int
        && request.resource.data.total >= resource.data.total
        && request.resource.data.updatedAt == request.time;
      allow delete: if false;
    }


    match /users/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      allow create, update: if request.auth != null && request.auth.uid == uid
        && request.resource.data.keys().hasOnly(['displayName','updatedAt'])
        && request.resource.data.displayName is string
        && request.resource.data.updatedAt == request.time;
      allow delete: if false;

      match /favourites/{favId} {
        allow read: if request.auth != null && request.auth.uid == uid;
        allow create: if request.auth != null && request.auth.uid == uid
          && request.resource.data.keys().hasOnly(['lat','lng','panoId','label','createdAt','order','guessLat','guessLng','distanceKm','points'])
          && request.resource.data.lat is number
          && request.resource.data.lng is number
          && (request.resource.data.panoId == null || request.resource.data.panoId is string)
          && request.resource.data.label is string
          && request.resource.data.order is number
          && (request.resource.data.guessLat == null || request.resource.data.guessLat is number)
          && (request.resource.data.guessLng == null || request.resource.data.guessLng is number)
          && (request.resource.data.distanceKm == null || request.resource.data.distanceKm is number)
          && (request.resource.data.points == null || request.resource.data.points is int)
          && request.resource.data.createdAt == request.time;
        allow update: if request.auth != null && request.auth.uid == uid
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['label','order'])
          && request.resource.data.label is string
          && request.resource.data.order is number;
        allow delete: if request.auth != null && request.auth.uid == uid;
      }
    }
  }
}
